// This file is @generated by prost-build.
/// Digest of a file or action cache entry.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Digest {
    /// The content hash as a lowercase hex string including any leading zeroes.
    #[prost(string, tag = "1")]
    pub hash: ::prost::alloc::string::String,
    /// The original content size in bytes.
    #[prost(int64, tag = "2")]
    pub size_bytes: i64,
    /// The name of the digest function used to compute the hash.
    #[prost(string, tag = "3")]
    pub hash_function_name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct File {
    /// Path to the file relative to the execution root.
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    /// Symlink target path.
    /// Only set for unresolved symlinks.
    #[prost(string, tag = "4")]
    pub symlink_target_path: ::prost::alloc::string::String,
    /// File digest.
    /// Always omitted for unresolved symlinks. May be omitted for empty files.
    #[prost(message, optional, tag = "2")]
    pub digest: ::core::option::Option<Digest>,
    /// Whether the file is a tool.
    /// Only set for inputs, never for outputs.
    #[prost(bool, tag = "3")]
    pub is_tool: bool,
}
/// Contents of command environment.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnvironmentVariable {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub value: ::prost::alloc::string::String,
}
/// Command execution platform. This message needs to be kept in sync
/// with [Platform][google.devtools.remoteexecution.v1test.Platform].
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Platform {
    #[prost(message, repeated, tag = "1")]
    pub properties: ::prost::alloc::vec::Vec<platform::Property>,
}
/// Nested message and enum types in `Platform`.
pub mod platform {
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Property {
        #[prost(string, tag = "1")]
        pub name: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub value: ::prost::alloc::string::String,
    }
}
/// Timing, size, and memory statistics for a SpawnExec.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpawnMetrics {
    /// Total wall time spent running a spawn, measured locally.
    #[prost(message, optional, tag = "1")]
    pub total_time: ::core::option::Option<::prost_types::Duration>,
    /// Time taken to convert the spawn into a network request.
    #[prost(message, optional, tag = "2")]
    pub parse_time: ::core::option::Option<::prost_types::Duration>,
    /// Time spent communicating over the network.
    #[prost(message, optional, tag = "3")]
    pub network_time: ::core::option::Option<::prost_types::Duration>,
    /// Time spent fetching remote outputs.
    #[prost(message, optional, tag = "4")]
    pub fetch_time: ::core::option::Option<::prost_types::Duration>,
    /// Time spent waiting in queues.
    #[prost(message, optional, tag = "5")]
    pub queue_time: ::core::option::Option<::prost_types::Duration>,
    /// Time spent setting up the environment in which the spawn is run.
    #[prost(message, optional, tag = "6")]
    pub setup_time: ::core::option::Option<::prost_types::Duration>,
    /// Time spent uploading outputs to a remote store.
    #[prost(message, optional, tag = "7")]
    pub upload_time: ::core::option::Option<::prost_types::Duration>,
    /// Time spent running the subprocess.
    #[prost(message, optional, tag = "8")]
    pub execution_wall_time: ::core::option::Option<::prost_types::Duration>,
    /// Time spent by the execution framework processing outputs.
    #[prost(message, optional, tag = "9")]
    pub process_outputs_time: ::core::option::Option<::prost_types::Duration>,
    /// Time spent in previous failed attempts, not including queue time.
    #[prost(message, optional, tag = "10")]
    pub retry_time: ::core::option::Option<::prost_types::Duration>,
    /// Total size in bytes of inputs or 0 if unavailable.
    #[prost(int64, tag = "11")]
    pub input_bytes: i64,
    /// Total number of input files or 0 if unavailable.
    #[prost(int64, tag = "12")]
    pub input_files: i64,
    /// Estimated memory usage or 0 if unavailable.
    #[prost(int64, tag = "13")]
    pub memory_estimate_bytes: i64,
    /// Limit of total size of inputs or 0 if unavailable.
    #[prost(int64, tag = "14")]
    pub input_bytes_limit: i64,
    /// Limit of total number of input files or 0 if unavailable.
    #[prost(int64, tag = "15")]
    pub input_files_limit: i64,
    /// Limit of total size of outputs or 0 if unavailable.
    #[prost(int64, tag = "16")]
    pub output_bytes_limit: i64,
    /// Limit of total number of output files or 0 if unavailable.
    #[prost(int64, tag = "17")]
    pub output_files_limit: i64,
    /// Memory limit or 0 if unavailable.
    #[prost(int64, tag = "18")]
    pub memory_bytes_limit: i64,
    /// Time limit or 0 if unavailable.
    #[prost(message, optional, tag = "19")]
    pub time_limit: ::core::option::Option<::prost_types::Duration>,
    /// Instant when the spawn started to execute.
    #[prost(message, optional, tag = "20")]
    pub start_time: ::core::option::Option<::prost_types::Timestamp>,
}
/// Each message contains an executed command, its full inputs and outputs, and
/// other information. This format is relatively costly to produce and results
/// in very large files, due to the amount of repeated information. The
/// --experimental_execution_log_compact_file format provides a better
/// alternative.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpawnExec {
    /// The command that was run.
    #[prost(string, repeated, tag = "1")]
    pub command_args: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// The command environment.
    #[prost(message, repeated, tag = "2")]
    pub environment_variables: ::prost::alloc::vec::Vec<EnvironmentVariable>,
    /// The command execution platform.
    #[prost(message, optional, tag = "3")]
    pub platform: ::core::option::Option<Platform>,
    /// The inputs at the time of the execution.
    #[prost(message, repeated, tag = "4")]
    pub inputs: ::prost::alloc::vec::Vec<File>,
    /// All the listed outputs paths. The paths are relative to the execution root.
    /// Actual outputs are a subset of the listed outputs. These paths are sorted.
    #[prost(string, repeated, tag = "5")]
    pub listed_outputs: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Whether the spawn was allowed to run remotely.
    #[prost(bool, tag = "6")]
    pub remotable: bool,
    /// Whether the spawn was allowed to be cached.
    #[prost(bool, tag = "7")]
    pub cacheable: bool,
    /// The spawn timeout.
    #[prost(int64, tag = "8")]
    pub timeout_millis: i64,
    /// The mnemonic of the action this spawn belongs to.
    #[prost(string, tag = "10")]
    pub mnemonic: ::prost::alloc::string::String,
    /// The outputs generated by the execution.
    /// In order for one of the listed_outputs to appear here, it must have been
    /// produced and have the expected type (file, directory or symlink).
    #[prost(message, repeated, tag = "11")]
    pub actual_outputs: ::prost::alloc::vec::Vec<File>,
    /// If the spawn did not hit a disk or remote cache, this will be the name of
    /// the runner, e.g. "remote", "linux-sandbox" or "worker".
    ///
    /// If the spawn hit a disk or remote cache, this will be "disk cache hit" or
    /// "remote cache hit", respectively. This includes the case where a remote
    /// cache was hit while executing the spawn remotely.
    ///
    /// Note that spawns whose owning action hits the persistent action cache
    /// are never reported at all.
    ///
    /// This won't always match the spawn strategy. For the dynamic strategy, it
    /// will be the runner for the first branch to complete. For the remote
    /// strategy, it might be a local runner in case of a fallback.
    #[prost(string, tag = "12")]
    pub runner: ::prost::alloc::string::String,
    /// Whether the spawn hit a disk or remote cache.
    #[prost(bool, tag = "13")]
    pub cache_hit: bool,
    /// A text status describing an execution error. Empty in case of success.
    #[prost(string, tag = "14")]
    pub status: ::prost::alloc::string::String,
    /// This field contains the contents of SpawnResult.exitCode.
    /// Its semantics varies greatly depending on the status field.
    /// Dependable: if status is empty, exit_code is guaranteed to be zero.
    #[prost(int32, tag = "15")]
    pub exit_code: i32,
    /// Whether the spawn was allowed to be cached remotely.
    #[prost(bool, tag = "16")]
    pub remote_cacheable: bool,
    /// The canonical label of the target this spawn belongs to.
    #[prost(string, tag = "18")]
    pub target_label: ::prost::alloc::string::String,
    /// The action cache digest.
    /// Only available when remote execution, remote cache or disk cache was
    /// enabled for this spawn.
    #[prost(message, optional, tag = "19")]
    pub digest: ::core::option::Option<Digest>,
    /// Timing, size and memory statistics.
    #[prost(message, optional, tag = "20")]
    pub metrics: ::core::option::Option<SpawnMetrics>,
}
/// An entry in the compact log format.
/// This is the format generated by --experimental_execution_log_compact_file.
///
/// Each entry describes either an executed spawn or non-spawn action or a piece
/// of data referenced by other entries. This considerably reduces the runtime
/// overhead and the size of the log when compared to the
/// --execution_log_{binary,json}_file formats.
///
/// To ensure that the log can be parsed in a single pass, every entry must be
/// serialized after all other entries it references by ID. However, entries
/// aren't guaranteed to be serialized in increasing ID order.
///
/// Entries other than Invocation, Spawn and SymlinkSction must not be assumed to
/// be canonical: they may be serialized multiple times with different IDs for
/// performance reasons.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecLogEntry {
    /// If nonzero, then this entry may be referenced by later entries by this ID.
    /// Nonzero IDs are unique within an execution log, but may not be contiguous.
    #[prost(uint32, tag = "1")]
    pub id: u32,
    /// The entry payload.
    #[prost(oneof = "exec_log_entry::Type", tags = "2, 3, 4, 5, 6, 7, 8, 9, 10")]
    pub r#type: ::core::option::Option<exec_log_entry::Type>,
}
/// Nested message and enum types in `ExecLogEntry`.
pub mod exec_log_entry {
    /// Information pertaining to the entire invocation.
    /// May appear at most once in the initial position.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Invocation {
        /// The hash function used to compute digests.
        #[prost(string, tag = "1")]
        pub hash_function_name: ::prost::alloc::string::String,
        /// The name of the subdirectory of the runfiles tree corresponding to the
        /// main repository (also known as the "workspace name").
        ///
        /// With --enable_bzlmod, this is always "_main", but can vary when using
        /// WORKSPACE.
        #[prost(string, tag = "2")]
        pub workspace_runfiles_directory: ::prost::alloc::string::String,
        /// Whether --experimental_sibling_repository_layout is enabled.
        #[prost(bool, tag = "3")]
        pub sibling_repository_layout: bool,
        /// The ID of the invocation.
        #[prost(string, tag = "4")]
        pub id: ::prost::alloc::string::String,
    }
    /// An input or output file.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct File {
        /// The file path.
        #[prost(string, tag = "1")]
        pub path: ::prost::alloc::string::String,
        /// A digest of the file contents.
        /// The hash function name is omitted. It can be obtained from Invocation.
        /// May be omitted for empty files.
        #[prost(message, optional, tag = "2")]
        pub digest: ::core::option::Option<super::Digest>,
    }
    /// An input or output directory.
    /// May be a source directory, a fileset tree, or a tree artifact.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Directory {
        /// The directory path.
        #[prost(string, tag = "1")]
        pub path: ::prost::alloc::string::String,
        /// The contained files, whose paths are relative to the directory.
        #[prost(message, repeated, tag = "2")]
        pub files: ::prost::alloc::vec::Vec<File>,
    }
    /// An unresolved symlink.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct UnresolvedSymlink {
        /// The symlink path.
        #[prost(string, tag = "1")]
        pub path: ::prost::alloc::string::String,
        /// The path the symlink points to.
        #[prost(string, tag = "2")]
        pub target_path: ::prost::alloc::string::String,
    }
    /// A set of spawn inputs.
    /// The contents of the set are the directly contained entries in addition to
    /// the contents of all transitively referenced sets. When order matters,
    /// transitive sets come before direct entries and within a set, entries are
    /// considered in left-to-right order ("postorder").
    /// Sets are not canonical: two sets with different structure may yield the
    /// same contents.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct InputSet {
        /// Entry IDs of files, directories, unresolved symlinks or runfiles trees
        /// belonging to this set.
        #[prost(uint32, repeated, tag = "5")]
        pub input_ids: ::prost::alloc::vec::Vec<u32>,
        /// Entry IDs of other input sets contained in this set.
        #[prost(uint32, repeated, tag = "4")]
        pub transitive_set_ids: ::prost::alloc::vec::Vec<u32>,
    }
    /// A collection of runfiles symlinked at custom locations.
    /// The contents of the set are the directly contained entries in addition to
    /// the contents of all transitively referenced sets. When order matters,
    /// transitive sets come before direct entries and within a set, entries are
    /// considered in left-to-right order ("postorder").
    /// Sets are not canonical: two sets with different structure may yield the
    /// same contents.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct SymlinkEntrySet {
        /// A map from relative paths of runfiles symlinks to the entry IDs of the
        /// symlink target, which may be a file, directory, or unresolved symlink.
        #[prost(map = "string, uint32", tag = "1")]
        pub direct_entries: ::std::collections::HashMap<
            ::prost::alloc::string::String,
            u32,
        >,
        /// Entry IDs of other symlink entry sets transitively contained in this set.
        #[prost(uint32, repeated, tag = "2")]
        pub transitive_set_ids: ::prost::alloc::vec::Vec<u32>,
    }
    /// A structured representation of the .runfiles directory of an executable.
    ///
    /// Instead of storing the directory directly, the tree is represented
    /// similarly to its in-memory representation in Bazel and needs to be
    /// reassembled from the following parts (in case of path collisions, later
    /// entries overwrite earlier ones):
    ///
    /// 1. symlinks (symlinks_id)
    /// 2. artifacts at canonical locations (input_set_id)
    /// 3. empty files (empty_files)
    /// 4. root symlinks (root_symlinks_id)
    /// 5. the _repo_mapping file with the repo mapping manifest
    /// (repo_mapping_manifest)
    /// 6. the <workspace runfiles directory>/.runfile file (if the workspace
    /// runfiles directory
    ///     wouldn't exist otherwise)
    ///
    /// See SpawnLogReconstructor#reconstructRunfilesDir for details.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct RunfilesTree {
        /// The runfiles tree path.
        #[prost(string, tag = "1")]
        pub path: ::prost::alloc::string::String,
        /// The entry ID of the set of artifacts in the runfiles tree that are
        /// symlinked at their canonical locations relative to the tree path.
        /// See SpawnLogReconstructor#getRunfilesPaths for how to recover the
        /// tree-relative paths of the artifacts from their exec paths.
        ///
        /// In case of path collisions, later artifacts overwrite earlier ones and
        /// artifacts override custom symlinks.
        ///
        /// The referenced set must not transitively contain any runfile trees.
        #[prost(uint32, tag = "2")]
        pub input_set_id: u32,
        /// The entry ID of the set of symlink entries with paths relative to the
        /// subdirectory of the runfiles tree root corresponding to the main
        /// repository.
        #[prost(uint32, tag = "3")]
        pub symlinks_id: u32,
        /// The entry ID of the set of symlink entries with paths relative to the
        /// root of the runfiles tree.
        #[prost(uint32, tag = "4")]
        pub root_symlinks_id: u32,
        /// The paths of empty files relative to the subdirectory of the runfiles
        /// tree root corresponding to the main repository.
        #[prost(string, repeated, tag = "5")]
        pub empty_files: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        /// The "_repo_mapping" file at the root of the runfiles tree, if it exists.
        /// Only the digest is stored as the relative path is fixed.
        #[prost(message, optional, tag = "6")]
        pub repo_mapping_manifest: ::core::option::Option<File>,
    }
    /// A spawn output.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Output {
        #[prost(oneof = "output::Type", tags = "5, 4")]
        pub r#type: ::core::option::Option<output::Type>,
    }
    /// Nested message and enum types in `Output`.
    pub mod output {
        #[allow(clippy::derive_partial_eq_without_eq)]
        #[derive(Clone, PartialEq, ::prost::Oneof)]
        pub enum Type {
            /// The ID of a file (ctx.actions.declare_file), directory
            /// (ctx.actions.declare_directory) or unresolved symlink
            /// (ctx.actions.declare_symlink) that is an output of the spawn.
            #[prost(uint32, tag = "5")]
            OutputId(u32),
            /// A declared output that is either missing or has the wrong type
            /// (e.g., a file where a directory was expected).
            #[prost(string, tag = "4")]
            InvalidOutputPath(::prost::alloc::string::String),
        }
    }
    /// An executed spawn.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct Spawn {
        /// The command line arguments.
        #[prost(string, repeated, tag = "1")]
        pub args: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
        /// The environment variables.
        #[prost(message, repeated, tag = "2")]
        pub env_vars: ::prost::alloc::vec::Vec<super::EnvironmentVariable>,
        /// The execution platform.
        #[prost(message, optional, tag = "3")]
        pub platform: ::core::option::Option<super::Platform>,
        /// Entry ID of the set of inputs. Unset means empty.
        #[prost(uint32, tag = "4")]
        pub input_set_id: u32,
        /// Entry ID of the subset of inputs that are tools. Unset means empty.
        #[prost(uint32, tag = "5")]
        pub tool_set_id: u32,
        /// The set of outputs.
        #[prost(message, repeated, tag = "6")]
        pub outputs: ::prost::alloc::vec::Vec<Output>,
        /// See SpawnExec.label.
        #[prost(string, tag = "7")]
        pub target_label: ::prost::alloc::string::String,
        /// See SpawnExec.mnemonic.
        #[prost(string, tag = "8")]
        pub mnemonic: ::prost::alloc::string::String,
        /// See SpawnExec.exit_code.
        #[prost(int32, tag = "9")]
        pub exit_code: i32,
        /// See SpawnExec.status.
        #[prost(string, tag = "10")]
        pub status: ::prost::alloc::string::String,
        /// See SpawnExec.runner.
        #[prost(string, tag = "11")]
        pub runner: ::prost::alloc::string::String,
        /// See SpawnExec.cache_hit.
        #[prost(bool, tag = "12")]
        pub cache_hit: bool,
        /// See SpawnExec.remotable.
        #[prost(bool, tag = "13")]
        pub remotable: bool,
        /// See SpawnExec.cacheable.
        #[prost(bool, tag = "14")]
        pub cacheable: bool,
        /// See SpawnExec.remote_cacheable.
        #[prost(bool, tag = "15")]
        pub remote_cacheable: bool,
        /// See SpawnExec.digest.
        /// The hash function name is omitted. It can be obtained from Invocation.
        /// Unset if the file is empty.
        #[prost(message, optional, tag = "16")]
        pub digest: ::core::option::Option<super::Digest>,
        /// See SpawnExec.timeout_millis.
        #[prost(int64, tag = "17")]
        pub timeout_millis: i64,
        /// See SpawnExec.metrics.
        #[prost(message, optional, tag = "18")]
        pub metrics: ::core::option::Option<super::SpawnMetrics>,
    }
    /// A symlink action, which is not backed by a spawn.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct SymlinkAction {
        /// The path of the input file of the action (i.e., the target of the
        /// symlink).
        #[prost(string, tag = "1")]
        pub input_path: ::prost::alloc::string::String,
        /// The path of the output file of the action (i.e., the symlink itself).
        #[prost(string, tag = "2")]
        pub output_path: ::prost::alloc::string::String,
        /// The canonical label of the target this action belongs to.
        #[prost(string, tag = "3")]
        pub target_label: ::prost::alloc::string::String,
        /// The mnemonic of the action.
        #[prost(string, tag = "4")]
        pub mnemonic: ::prost::alloc::string::String,
    }
    /// The entry payload.
    #[allow(clippy::derive_partial_eq_without_eq)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Type {
        #[prost(message, tag = "2")]
        Invocation(Invocation),
        #[prost(message, tag = "3")]
        File(File),
        #[prost(message, tag = "4")]
        Directory(Directory),
        #[prost(message, tag = "5")]
        UnresolvedSymlink(UnresolvedSymlink),
        #[prost(message, tag = "6")]
        InputSet(InputSet),
        #[prost(message, tag = "7")]
        Spawn(Spawn),
        #[prost(message, tag = "8")]
        SymlinkAction(SymlinkAction),
        #[prost(message, tag = "9")]
        SymlinkEntrySet(SymlinkEntrySet),
        #[prost(message, tag = "10")]
        RunfilesTree(RunfilesTree),
    }
}
